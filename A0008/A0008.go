package main

import (
	"fmt"
	"math"
)

/*
请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。

函数 myAtoi(string s) 的算法如下：

读入字符串并丢弃无用的前导空格
检查第一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
返回整数作为最终结果。
注意：

本题中的空白字符只包括空格字符 ' ' 。
除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。

示例 1：

输入：s = "42"
输出：42
解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
第 1 步："42"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
         ^
第 3 步："42"（读入 "42"）
           ^
解析得到整数 42 。
由于 "42" 在范围 [-231, 231 - 1] 内，最终结果为 42 。
示例 2：

输入：s = "   -42"
输出：-42
解释：
第 1 步："   -42"（读入前导空格，但忽视掉）
            ^
第 2 步："   -42"（读入 '-' 字符，所以结果应该是负数）
             ^
第 3 步："   -42"（读入 "42"）
               ^
解析得到整数 -42 。
由于 "-42" 在范围 [-231, 231 - 1] 内，最终结果为 -42 。
示例 3：

输入：s = "4193 with words"
输出：4193
解释：
第 1 步："4193 with words"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："4193 with words"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
         ^
第 3 步："4193 with words"（读入 "4193"；由于下一个字符不是一个数字，所以读入停止）
             ^
解析得到整数 4193 。
由于 "4193" 在范围 [-231, 231 - 1] 内，最终结果为 4193 。
示例 4：

输入：s = "words and 987"
输出：0
解释：
第 1 步："words and 987"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："words and 987"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
         ^
第 3 步："words and 987"（由于当前字符 'w' 不是一个数字，所以读入停止）
         ^
解析得到整数 0 ，因为没有读入任何数字。
由于 0 在范围 [-231, 231 - 1] 内，最终结果为 0 。
示例 5：

输入：s = "-91283472332"
输出：-2147483648
解释：
第 1 步："-91283472332"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："-91283472332"（读入 '-' 字符，所以结果应该是负数）
          ^
第 3 步："-91283472332"（读入 "91283472332"）
                     ^
解析得到整数 -91283472332 。
由于 -91283472332 小于范围 [-231, 231 - 1] 的下界，最终结果被截断为 -231 = -2147483648 。

提示：

0 <= s.length <= 200
s 由英文字母（大写和小写）、数字（0-9）、' '、'+'、'-' 和 '.' 组成

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/string-to-integer-atoi
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

func main() {
	num := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000522545459"
	fmt.Println(myAtoi(num))
}

func myAtoi(s string) int {
	ans := 0
	arr := []int{} // arr保存数字
	var negitive = 1
	op := []bool{} //op 保存符号
	for _, v := range s {
		if v == ' ' {
			// 如果数字数组和符号数组都为空对应则说明现在还处于前导空格的阶段，则继续读入字符
			if len(arr) == 0 && len(op) == 0 {
				continue
			} else { // 空格在字符之间了，直接break
				break
			}
		}
		if v == '-' {
			// 如果负号是除空格外第一个读入的字符，则记录下来，否则break
			if len(arr) == 0 && len(op) == 0 {
				op = append(op, false)
				negitive = -1
				continue
			} else {
				break
			}
		}
		if v == '+' {
			if len(arr) == 0 && len(op) == 0 {
				op = append(op, true)
				continue
			} else {
				break
			}
		}
		// 读入的字符是数字，写入数字数字，否则直接break
		if v > 47 && v < 58 {
			arr = append(arr, int(v-'0'))
			continue
		} else {
			break
		}
	}

	// 去除前导0
	for _, v := range arr {
		if v == 0 {
			arr = arr[1:]
			continue
		}
		break
	}

	multi := 1
	for i := len(arr) - 1; i >= 0; i-- {
		ans += arr[i] * multi
		multi *= 10
		// 如果ans已经大于int32了 或者在arr[0]等于0的情况下ans+multi大于int32时返回临界值，
		// 后一个检查条件是为了应对"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000522545459"
		// 这样的情况，当读到的数字是0时ans的值实际上是不变的，但是一旦读到最高位ans会直接超过int64
		// 导致最终结果的不正确
		if ans > math.MaxInt32 || arr[i] == 0 && (multi+ans) > math.MaxInt32 {
			if negitive == -1 {
				return -math.MaxInt32 - 1
			}
			return math.MaxInt32
		}
	}
	ans *= negitive
	return ans
}
